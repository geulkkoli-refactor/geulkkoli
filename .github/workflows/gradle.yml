name: main CI CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  LIGHTSAIL_SSH_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
  LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
  LIGHTSAIL_USER: ${{ secrets.LIGHTSAIL_USER }}
  AWS_REGION: ap-northeast-2

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:
      # jdk 설정
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle cache 설정
      - name: gradle 캐시하기
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 프로덕션 환경 설정
      - name: 프로덕션 환경 설정
        run: |
          cd ./src/main/resources
          # application.yml 파일 생성
          touch ./application.yml
          # application.yml 파일에 프로퍼티 추가
          echo "$PROPERTIES_PROD" > ./application.yml

        shell: bash
        env:
          PROPERTIES_PROD: ${{ secrets.PROPERTIES_PROD }}
        ## gradle 빌드
      - name: gradle 빌드
        run: ./gradlew clean build -x test

        # AWS 인증
      - name: AWS 인증
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # AWS 인증이 완료되었는지 테스트합니다.
      - name: AWS Lightsail에 연결되었는지 확인
        run: aws configure list

      ## 라이트 세일 파일 전송
      - name: 라이트 세일 파일 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.LIGHTSAIL_HOST }}
          username: ${{ env.LIGHTSAIL_USER }}
          key: ${{ env.LIGHTSAIL_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "/home/${{env.LIGHTSAIL_USER}}/barabara"


            
